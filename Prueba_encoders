#include "driver/pcnt.h"

// Pines de encoder
#define ENCODER_A_PIN_A 4   // Motor A canal A
#define ENCODER_A_PIN_B 13  // Motor A canal B
#define ENCODER_B_PIN_A 27  // Motor B canal A
#define ENCODER_B_PIN_B 14  // Motor B canal B


// Manejo de overflow
volatile long encoderCountA = 0;
volatile long encoderCountB = 0;

// Función genérica para configurar un canal de PCNT
void setupEncoder(pcnt_unit_t unit, int pinA, int pinB) {
  pcnt_config_t pcnt_config = {};
  pcnt_config.pulse_gpio_num = pinA;     // canal A
  pcnt_config.ctrl_gpio_num = pinB;      // canal B
  pcnt_config.channel = PCNT_CHANNEL_0;
  pcnt_config.unit = unit;
  pcnt_config.pos_mode = PCNT_COUNT_INC; // contar hacia adelante
  pcnt_config.neg_mode = PCNT_COUNT_DEC; // contar hacia atrás
  pcnt_config.lctrl_mode = PCNT_MODE_REVERSE; // invertir según canal B
  pcnt_config.hctrl_mode = PCNT_MODE_KEEP;
  pcnt_config.counter_h_lim = 32767;
  pcnt_config.counter_l_lim = -32768;

  pcnt_unit_config(&pcnt_config);

  // Filtro opcional para rebote (valores <1000 ns suelen ser ruido)
  pcnt_set_filter_value(unit, 1000);
  pcnt_filter_enable(unit);

  pcnt_counter_pause(unit);
  pcnt_counter_clear(unit);
  pcnt_counter_resume(unit);
}

// Función para leer un encoder y extender a 32 bits
long readEncoder(pcnt_unit_t unit, volatile long &accumulated) {
  int16_t count;
  pcnt_get_counter_value(unit, &count);

  accumulated += count;        // acumula ticks
  pcnt_counter_clear(unit);    // reinicia contador hardware

  return accumulated;
}

void setup() {
  Serial.begin(115200);

  // Configurar los dos encoders en unidades diferentes
  setupEncoder(PCNT_UNIT_0, ENCODER_A_PIN_A, ENCODER_A_PIN_B);
  setupEncoder(PCNT_UNIT_1, ENCODER_B_PIN_A, ENCODER_B_PIN_B);
}

void loop() {
  static unsigned long lastPrint = 0;

  if (millis() - lastPrint > 200) {
    lastPrint = millis();

    long motorA = -readEncoder(PCNT_UNIT_0, encoderCountA);
    long motorB = readEncoder(PCNT_UNIT_1, encoderCountB);

    Serial.print("Motor A: ");
    Serial.print(motorA);
    Serial.print(" ticks | Motor B: ");
    Serial.println(motorB);
  }
}
